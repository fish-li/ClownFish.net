using System.Runtime.InteropServices;

namespace ClownFish.Base;


// 有序GUID参考：
// https://www.cnblogs.com/tdfblog/p/SequentialGuid.html
// https://blog.csdn.net/u010690818/article/details/88646048

/// <summary>
/// 有序GUID的类别
/// </summary>
public enum SequentialGuidType
{
    /// <summary>
    /// 按字符串(Guid.ToString())排序，适用于 MySQL(char36), PostgreSQL(uuid), DaMeng(char36)
    /// </summary>
    AsString,

    /// <summary>
    /// 按二进制(Guid.ToByteArray())方式排序，适用于 Oracle
    /// </summary>
    AsBinary,

    /// <summary>
    /// 按SQLSERVER规则排序，适用于 SQLSERVER(UniqueIdentifier)
    /// </summary>
    AtEnd
}


/// <summary>
/// Guid扩展方法类
/// </summary>
public static class GuidHelper
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1060")]
    [DllImport("rpcrt4.dll", SetLastError = true)]
    private static extern int UuidCreateSequential(out Guid guid);


    // 参考链接 https://github.com/jhtodd/SequentialGuid/blob/master/SequentialGuid/Classes/SequentialGuid.cs
    private static readonly RandomNumberGenerator s_randomGenerator = RandomNumberGenerator.Create();


    /// <summary>
    /// Returns a new GUID value which is sequentially ordered when formatted as
    /// a string, a byte array, or ordered by the least significant six bytes of the
    /// Data4 block, as specified by <paramref name="guidType" />.
    /// </summary>
    /// <param name="guidType">
    /// Specifies the type of sequential GUID (i.e. whether sequential as a string,
    /// as a byte array, or according to the Data4 block.  This can affect
    /// performance under various database types; see below.
    /// </param>
    /// <returns>
    /// A <see cref="Guid" /> structure whose value is created by replacing
    /// certain randomly-generated bytes with a sequential timestamp.
    /// </returns>
    /// <remarks>
    /// <para>
    /// This method creates a new GUID value which combines a random component
    /// with the current timestamp, also known as a COMB.  The general concept
    /// is outlined in Jimmy Nilsson's article "The Cost of GUIDs as Primary Keys",
    /// and involves replacing either the least significant or most significant
    /// six bytes of the GUID with the current timestamp.  This reduces the
    /// random component of the GUID from 16 bytes to 10 bytes, but this is
    /// still sufficient to prevent a collision under most real-world circumstances.
    /// </para>
    /// <para>
    /// The purpose of sequential GUIDs is not to promote the use of GUIDs as
    /// sortable entities.  In fact, GUIDs generated very close together may
    /// have the same timestamp and are not guaranteed to be sequentially ordered
    /// at all.  The intent is to increase performance when doing repeated
    /// inserts into database tables that have a clustered index on a GUID
    /// column, so that later entries do not have to be inserted into the middle
    /// of the table, but can simply be appended to the end.
    /// </para>
    /// <para>
    /// According to experiments, Microsoft SQL Server sorts GUID values using
    /// the least significant six bytes of the Data4 block; therefore, GUIDs being
    /// generated for use with SQL Server should pass a <paramref name="guidType" /> 
    /// value of <c>SequentialAtEnd</c>.  GUIDs generated for most other database
    /// types should be passed a <paramref name="guidType" /> value of
    /// <c>SequentialAsString</c> or <c>SequentialAsByteArray</c>.
    /// </para>
    /// <para>
    /// Various standards already define a time-based UUID; however, the
    /// format specified by these standards splits the timestamp into
    /// several components, limiting its usefulness as a sequential ID.
    /// Additionally, the format used for such UUIDs is not compatible
    /// with the GUID ordering on Microsoft SQL Server.
    /// </para>
    /// </remarks>
    public static Guid CreateSeqGuid(SequentialGuidType guidType)
    {
        // We start with 16 bytes of cryptographically strong random data.
        byte[] randomBytes = new byte[10];
        s_randomGenerator.GetBytes(randomBytes);

        // An alternate method: use a normally-created GUID to get our initial
        // random data:
        // byte[] randomBytes = Guid.NewGuid().ToByteArray();
        // This is faster than using RNGCryptoServiceProvider, but I don't
        // recommend it because the .NET Framework makes no guarantee of the
        // randomness of GUID data, and future versions (or different
        // implementations like Mono) might use a different method.

        // Now we have the random basis for our GUID.  Next, we need to
        // create the six-byte block which will be our timestamp.

        // We start with the number of milliseconds that have elapsed since
        // DateTime.MinValue.  This will form the timestamp.  There's no use
        // being more specific than milliseconds, since DateTime.Now has
        // limited resolution.

        // Using millisecond resolution for our 48-bit timestamp gives us
        // about 5900 years before the timestamp overflows and cycles.
        // Hopefully this should be sufficient for most purposes. :)
        long timestamp = DateTime.UtcNow.Ticks / 10000L;

        // Then get the bytes
        byte[] timestampBytes = BitConverter.GetBytes(timestamp);

        // Since we're converting from an Int64, we have to reverse on
        // little-endian systems.
        if( BitConverter.IsLittleEndian ) {
            Array.Reverse(timestampBytes);
        }

        byte[] guidBytes = new byte[16];

        switch( guidType ) {
            case SequentialGuidType.AsString:
            case SequentialGuidType.AsBinary:

                // For string and byte-array version, we copy the timestamp first, followed
                // by the random data.
                Buffer.BlockCopy(timestampBytes, 2, guidBytes, 0, 6);
                Buffer.BlockCopy(randomBytes, 0, guidBytes, 6, 10);

                // If formatting as a string, we have to compensate for the fact
                // that .NET regards the Data1 and Data2 block as an Int32 and an Int16,
                // respectively.  That means that it switches the order on little-endian
                // systems.  So again, we have to reverse.
                if( guidType == SequentialGuidType.AsString && BitConverter.IsLittleEndian ) {
                    Array.Reverse(guidBytes, 0, 4);
                    Array.Reverse(guidBytes, 4, 2);
                }

                break;

            case SequentialGuidType.AtEnd:

                // For sequential-at-the-end versions, we copy the random data first,
                // followed by the timestamp.
                Buffer.BlockCopy(randomBytes, 0, guidBytes, 0, 10);
                Buffer.BlockCopy(timestampBytes, 2, guidBytes, 10, 6);
                break;
        }

        return new Guid(guidBytes);
    }



    /// <summary>
    /// 生成[符合字符串排序规则]的有序GUID
    /// </summary>
    /// <returns></returns>
    public static Guid NewSeqGuid()
    {
        return CreateSeqGuid(SequentialGuidType.AsString);
    }

    internal static Guid NewSeqGuidWindows()
    {
        // 请参见如下网址说明。
        // https://blogs.msdn.microsoft.com/dbrowne/2012/07/03/how-to-generate-sequential-guids-for-sql-server-in-net/
        // http://msdn.microsoft.com/zh-cn/library/ms189786%28v=sql.120%29.aspx
        // http://www.pinvoke.net/default.aspx/rpcrt4/UuidCreateSequential.html

        Guid guid;

        //调用windows API 创建有序GUID
        UuidCreateSequential(out guid);
        var s = guid.ToByteArray();

        //转换为byte数组
        var t = new byte[16];

        //由于sqlserver里有序guid与windows有序guid排序方式不一致，所以这里需要做一次转换
        //0-3作为一组替换
        //4-9作为一组替换
        //10-15作为一组替换

        t[3] = s[0];
        t[2] = s[1];
        t[1] = s[2];
        t[0] = s[3];
        t[5] = s[4];
        t[4] = s[5];
        t[7] = s[6];
        t[6] = s[7];
        t[8] = s[8];
        t[9] = s[9];
        t[10] = s[10];
        t[11] = s[11];
        t[12] = s[12];
        t[13] = s[13];
        t[14] = s[14];
        t[15] = s[15];

        //重新转换为Guid
        return new Guid(t);
    }


    /*
     
    private static void TestMethod()
    {
        string connectionString = @"................................";

        using( SqlConnection connection = new SqlConnection(connectionString) ) {
            connection.Open();

            SqlParameter p1 = new SqlParameter("@RowGuid", SqlDbType.UniqueIdentifier);
            SqlParameter p2 = new SqlParameter("@IntValue", SqlDbType.Int);

            SqlCommand command = new SqlCommand();
            command.Connection = connection;
            command.CommandText = "insert into TestGuid(RowGuid, IntValue) values(@RowGuid, @IntValue);";
            command.Parameters.Add(p1);
            command.Parameters.Add(p2);

            for( int i = 0; i < 1000; i++ ) {
                p1.Value = GuidHelper.NewSeqGuid();
                p2.Value = i + 1;
                command.ExecuteNonQuery();
            }
        }
    }


    CREATE TABLE [TestGuid](
        [RowGuid] UniqueIdentifier NOT NULL,
        [IntValue] [int] NOT NULL,
        [RowIndex] [int] IDENTITY(1,1) NOT NULL,
        CONSTRAINT [PK_TestGuid] PRIMARY KEY CLUSTERED 
        (
            [RowGuid] ASC
        )
    ) 

    检查方法： select * from [TestGuid]

    */

}
